{"version":3,"sources":["components/Header.tsx","components/Button.tsx","components/ScoreCard.tsx","components/QuizCard.tsx","utils/checkSelectedOptions.ts","components/List.tsx","utils/api.ts","pages/Homepage/App.tsx","index.tsx"],"names":["props","className","children","disabled","selectedColor","customClass","id","dangerouslySetInnerHTML","__html","score","phrase","href","trivia","increaseScore","increaseQuestionNumber","setSelected","selected","gameover","displayOptions","options","map","item","index","color","correct_answer","Button","key","onClick","e","name","target","selectedOption","findIndex","option","checkSelectedOption","question","ScoreCard","List","questionNumber","length","style","display","alignItems","QuizCard","a","fetchTriviaQuestions","results","incorrect_answers","sort","Math","random","amount","difficulty","url","fetch","response","json","useState","loading","gameOver","appState","setAppState","useEffect","API","then","data","Component","ListLoading","isLoading","textAlign","fontSize","Fragment","Header","currentQuestionNumber","value","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.1d0dd3c9.chunk.js","sourcesContent":["/**\n * Header component used for setting the background UI of the application.\n */\n\nimport React from \"react\";\nexport default (props: any) => {\n  return (\n    <div className=\"w-full text-center min-h-screen rounded bg-background bg-cover pb-16 \">\n      <div className=\"text-4xl p-8\">Quizzy</div>\n      {props.children}\n    </div>\n  );\n};\n","/**\n * Custom button used as options for selecting the answers for questions.\n */\n\nimport React from \"react\";\n\ntype ButtonProps = {\n  children: any;\n  disabled?: boolean;\n  selectedColor?: string;\n};\n\nexport default ({\n  children,\n  disabled = false,\n  selectedColor = \"\",\n}: ButtonProps) => {\n  let customClass = `w-96 m-4 text-left bg-transparent hover:bg-blue-500 text-gray-700 font-normal hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded `;\n  if (disabled) {\n    customClass = `w-96 m-4 text-left bg-transparent bg-${selectedColor}-500 text-gray-700 font-normal py-2 px-4 border border-blue-500 hover:border-transparent rounded opacity-90 cursor-not-allowed`;\n  }\n  return (\n    <button\n      disabled={disabled}\n      id={children}\n      className={customClass}\n      dangerouslySetInnerHTML={{ __html: children }}\n    ></button>\n  );\n};\n","import React from \"react\";\n\nexport default ({ score }: any) => {\n  let phrase = \"\";\n  if (score >= 8) {\n    phrase = \"Awesome\";\n  } else if (score >= 5) {\n    phrase = \"Good Job\";\n  } else if (score >= 0) {\n    phrase = \"Good Luck next time!\";\n  }\n  return (\n    <div>\n      <h1>\n        {phrase}, You scored {score}/10<br></br> Thank you for playing Quizzy!\n      </h1>\n      <a href=\"#\">\n        <button className=\"w-40 m-4 p-4 h-auto bg-gray-800 rounded text-white items-center\">\n          Restart\n        </button>\n      </a>\n    </div>\n  );\n};\n","/**\n * QuizCard is the main component that handles onClick events, displays questions, options and score.\n */\n\nimport React from \"react\";\nimport Button from \"./Button\";\nimport checkSelectedOption from \"../utils/checkSelectedOptions\";\nimport ScoreCard from \"./ScoreCard\";\n\ntype QuizCard = {\n  trivia: any;\n  increaseScore: Function;\n  increaseQuestionNumber: () => void;\n  setSelected: Function;\n  selected: boolean;\n  score: number;\n  gameover: boolean;\n};\nexport default ({\n  trivia,\n  increaseScore,\n  increaseQuestionNumber,\n  setSelected,\n  selected,\n  score,\n  gameover,\n}: QuizCard) => {\n  const handleOnClick = (e: any) => {\n    const name = e.target.id;\n    if (checkSelectedOption(trivia.options, name)) {\n      setSelected(true);\n      if (name === trivia.correct_answer) {\n        //user selected correct option -> trigger increase score and display answer\n        increaseScore();\n      }\n    }\n  };\n\n  /**\n   * This method returns a list of buttons created by passing options from props.\n   */\n  const displayOptions = trivia.options.map((item: any, index: number) => {\n    let color = item === trivia.correct_answer ? \"green\" : \"red\";\n    return (\n      <Button\n        selectedColor={color}\n        key={index}\n        disabled={selected ? true : false}\n      >\n        {item}\n      </Button>\n    );\n  });\n  return (\n    <div\n      className=\"mx-2 lg:mx-96 my-18 w-100 justify-center p-4 h-auto bg-gray-300 rounded items-center\"\n      onClick={handleOnClick}\n    >\n      <div className=\"flex-grow\">\n        <h1\n          className=\"m-4 p-2 text-3xl\"\n          dangerouslySetInnerHTML={{ __html: trivia.question }}\n        ></h1>\n        {displayOptions}\n      </div>\n      <div className=\"m-8 justify-between flex\">\n        <h1 className=\" w-40 p-4 h-auto bg-gray-800 rounded  text-white items-center\">\n          Score: {score}\n        </h1>\n        <button\n          onClick={increaseQuestionNumber}\n          className={\n            `w-40 p-4 h-auto bg-gray-800 rounded text-white items-center` +\n            (gameover && ` opacity-50 cursor-not-allowed`)\n          }\n          disabled={gameover && true}\n        >\n          Next\n        </button>\n      </div>\n      {gameover && selected && <ScoreCard score={score} />}\n    </div>\n  );\n};\n","export default (options: Array<string>, selectedOption: string) => {\n  //checking if selected option is valid\n  const selectedOptionIsValid = options.findIndex(\n    (option) => option === selectedOption\n  );\n  if (selectedOptionIsValid >= 0) {\n    return true;\n  }\n};\n","import React from \"react\";\nimport QuizCard from \"./QuizCard\";\n\nconst List = (props: any) => {\n  const {\n    trivia,\n    increaseScore,\n    increaseQuestionNumber,\n    questionNumber,\n    selected,\n    setSelected,\n    score,\n    gameover,\n  } = props;\n  if (!trivia || trivia.length === 0) return <p>No trivia questions, sorry</p>;\n  return (\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      <QuizCard\n        increaseScore={increaseScore}\n        increaseQuestionNumber={increaseQuestionNumber}\n        trivia={trivia[questionNumber]}\n        selected={selected}\n        setSelected={setSelected}\n        score={score}\n        gameover={gameover}\n      ></QuizCard>\n    </div>\n  );\n};\n\nexport default List;\n","//fetch informaiton from opentdb\n//\n\nexport default async () => {\n  let results = await fetchTriviaQuestions();\n  let trivia = results.map((item: any) => {\n    const { correct_answer, incorrect_answers, question } = item;\n    let options = shuffle([...incorrect_answers, correct_answer]);\n    return {\n      question,\n      options,\n      correct_answer,\n    };\n  });\n  return trivia;\n};\n\nconst fetchTriviaQuestions = async (amount = 5, difficulty = \"easy\") => {\n  const url = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const response = await fetch(url);\n  const { results } = await response.json();\n  return results;\n};\n\nfunction shuffle(array: Array<string>) {\n  return array.sort(() => Math.random() - 0.5);\n}\n","import React, { useEffect, useState } from \"react\";\nimport Header from \"../../components/Header\";\nimport List from \"../../components/List\";\nimport API from \"../../utils/api\";\n\nexport default (props: any) => {\n  //Application state\n  const [appState, setAppState] = useState({\n    loading: false,\n    trivia: null,\n    score: 0,\n    questionNumber: 0,\n    selected: false,\n    gameOver: false,\n  });\n  //asynchronously fetch data once the component is mounted.\n  useEffect(() => {\n    setAppState({\n      ...appState,\n      loading: true,\n    });\n\n    API().then((data) =>\n      setAppState({ ...appState, loading: false, trivia: data })\n    );\n  }, [setAppState]);\n\n  const increaseScore = () => {\n    setAppState({ ...appState, score: appState.score + 1, selected: true });\n  };\n  const increaseQuestionNumber = () => {\n    //increase questions while number is less than 5\n    const currentQuestionNumber = appState.questionNumber;\n    setAppState({\n      ...appState,\n      questionNumber: appState.questionNumber + 1,\n      selected: false,\n    });\n    //trigger game over once the user reaches teh 4th question ( 2nd last )\n    if (currentQuestionNumber === 3) {\n      setAppState({\n        ...appState,\n        questionNumber: appState.questionNumber + 1,\n        gameOver: true,\n        selected: false,\n      });\n    }\n  };\n  const setSelected = (value: boolean) => {\n    setAppState({ ...appState, selected: value });\n  };\n\n  const ListLoading = WithListLoading(List);\n  return (\n    <React.Fragment>\n      <Header>\n        <ListLoading\n          increaseScore={increaseScore}\n          increaseQuestionNumber={increaseQuestionNumber}\n          isLoading={appState.loading}\n          trivia={appState.trivia}\n          questionNumber={appState.questionNumber}\n          selected={appState.selected}\n          setSelected={setSelected}\n          score={appState.score}\n          gameover={appState.gameOver}\n        />\n      </Header>\n    </React.Fragment>\n  );\n};\n\n/**\n * A HOC that handles the UI of the app until its finished loading the API.\n * Using the state of isLoading to check if the API is done calling the endpoint\n * The component passed in as a parameter is rendered with the remaining props.\n * @param Component Component to be rendered with API data.\n */\n\nfunction WithListLoading(Component: any) {\n  return function WihLoadingComponent({ isLoading, ...props }: any) {\n    if (!isLoading) return <Component {...props} />;\n    return (\n      <p style={{ textAlign: \"center\", fontSize: \"40px\" }}>\n        Hold on, fetching data may take some time :)\n      </p>\n    );\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/main.css\";\nimport App from \"./pages/Homepage/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}